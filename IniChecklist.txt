overflow|Переполнение при совершении математических действий|yes||В смарт-контракте производятся математические действия. Есть возможность переполнения, что может привести к потере средств, рекомендуется использовать библиотеку SafeMath. Начиная с Solidity 0.8, SafeMath интегрирована  в язык.
def_visibility|Методы без модификаторов|yes||По умолчанию, методы без модификаторов объявляются публичными public. Модификаторы видимости контролируют вызов функции. Public функция доступна для внешних контрактов.
self_destruct|Использование selfdestruct|yes||Любой контракт способен реализовать функцию selfdestruct(address), которая удаляет весь байт-код с адреса контракта и отправляет весь эфир, хранящийся там, на указанный параметром адрес. Функция selfdestruct() может быть использована для принудительной отправки эфира в любой контракт независимо от любого кода, который может существовать в контракте. Это включает в себя контракты без каких-либо оплачиваемых функций. Это означает, что любой злоумышленник может создать контракт с функцией selfdestruct(), отправить на него эфир, вызвать selfdestruct(target) и заставить ether быть отправленным на целевой контракт.
delegatecall|Использование  delegatecall|yes||delegatecall- это функция низкого уровня, аналогичная функции call. Следует проверять надежность вызываемого смарт-контракта, иначе возможна потеря газа.
callreentrancy|Возможность повторного входа (рекурсивный вызов)|yes||Уязвимость типа Reentrancy, также известная как рекурсивный вызов. Проблема кроется в том, что уязвимый контракт совершает вызов к другому контракту ( используя call ), при этом внешний контракт может делать ответный вызов функций уязвимого контракта внутри начального вызова. Рекомендуется использовать transfer().
braces|Расстановка фигурных скобок|yes||Проверьте расстановку фигурных скобок, существуют не закрытые скобки.
def_notifcall|Необработкуа возвращаемого значения функций send, call|yes||При использовании низкоуровневых вызовов : call(), callcode(), send(), всегда требуется дополнительная проверка возвращаемого значения этими методами, один из ее вариантов дописан в коде смарт-контракта. Ее отсутствие может привести к потере средств.
non_init_var|Переменная не инициализированна|yes||Неинициализированные переменные могут содержать любое значение, если вы не инициализируете их, а чтение их в неинициализированном состоянии является неопределенным поведением. (за исключением случаев, когда они инициализированы нулем ) Например, транзакция на неинициализированный адрес приведет к потере средств.
external_test|тестовый вызов внешней проверки|no|C:\Users\lapak\PycharmProjects\smart-contracts_audit\External_chk\test_chk.py|математическая проверка, подключаемая за счет настроек (не включенная в исходный код программа)
